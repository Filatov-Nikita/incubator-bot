import Config from './app/core/config.js';
import { Telegraf, Markup } from 'telegraf';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import fs from 'fs';
import axios from 'axios';
import LRUCache from 'lru-cache';

const cache = new LRUCache({ ttl: 100 * 60 * 5 });
const config = new Config();

const token = config.get('BOT_TOKEN');
const appHost = config.get('APP_HOST');
const productsUri = config.get('PRODUCTS_URI');
const appToken = config.get('APP_TOKEN');

const privateKey = JSON.parse(fs.readFileSync('./tgbotgoogle.json')).private_key;

const doc = new GoogleSpreadsheet('1H2KLTUk6nOlIL6kI3_Z3GqGK1LVGP5rc01Gj8AKLFUs');

await doc.useServiceAccountAuth({
  client_email: config.get('EMAIL'),
  private_key: privateKey
});


const bot = new Telegraf(token);

const productsBtn = '–ü—Ç–∏—Ü–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ üê£';
const datesBtn = '–ì—Ä–∞—Ñ–∏–∫ –≤—ã–≤–æ–¥–æ–≤ üóì';
const contactsBtn = '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã üöö';

bot.start(onStart);
bot.command('products', onProducts);
bot.command('dates', onDates);
bot.command('contacts', onContacts);
bot.hears(productsBtn, onProducts);
bot.hears(datesBtn, onDates);
bot.hears(contactsBtn, onContacts);

async function onProducts(ctx) {
  try {
    if(cache.has('products')) {
      return ctx.reply( getProductsMsg(cache.get('products')) );
    }

    const { data: cats } = await axios.get(`${appHost}/categories`, {
      headers: { token: appToken },
    });

    const catInd = cats.findIndex(cat => cat.name === '–ü—Ç–∏—Ü–∞');
    if(catInd === -1) return;

    const { data: products } = await axios.get(`${appHost}/${productsUri}`, {
      headers: { token: appToken },
      params: {
        categoryId: cats[catInd].id,
        visible: '1'
      }
    });

    cache.set('products', products);

    ctx.reply(getProductsMsg(products));
  } catch(e) {
    console.log(e);
  }
}

async function onContacts(ctx) {
  await ctx.reply(`–ö–∞—Ä–º–∞—Å–∫–∞–ª–∏–Ω—Å–∫–∏–π –∏–Ω–∫—É–±–∞—Ç–æ—Ä`);
  await ctx.replyWithLocation('54.385167', '56.218986');
  await ctx.reply(`–ü—Ä–æ–¥–∞–∂–∞ –æ–ø—Ç–æ–º –∏ –≤ —Ä–æ–∑–Ω–∏—Ü—É.
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: +7 (917) 750-56-55 - –ù–∞—Ç–∞–ª—å—è üôãüèª‚Äç‚ôÄÔ∏è`);

  await ctx.reply(`–£—á–∞–ª–∏–Ω—Å–∫–∏–π –∏–Ω–∫—É–±–∞—Ç–æ—Ä`);
  await ctx.replyWithLocation('54.369529', '59.430770');
  await ctx.reply(`–ü—Ä–æ–¥–∞–∂–∞ –æ–ø—Ç–æ–º –∏ –≤ —Ä–æ–∑–Ω–∏—Ü—É.
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: +7 (917) 425-95-78 - –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω üôãüèª‚Äç‚ôÇÔ∏è`);
};


async function onDates(ctx) {
  await doc.loadInfo();

  const sheet = doc.sheetsByIndex[1];

  const rows = await sheet.getRows();

  ctx.reply(getDatesMsg(rows));
}

function onStart(ctx) {
  ctx.reply(
    getWelcomeMsg(),
    Markup.keyboard([
      [productsBtn],
      [datesBtn],
      [contactsBtn]
    ]).resize()
  );
}

function getDatesMsg(rows) {
  return rows
  .map(row => `${row['–î–∞—Ç–∞']} - ${row['–ü—Ç–∏—Ü–∞']}`)
  .join('\n');
}

function getProductsMsg(rows) {
  return rows
  .map(row => `${row.name} - —Ü–µ–Ω–∞ ${row.price} —Ä—É–±.`)
  .join('\n');
}

function getWelcomeMsg() {
  return `
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –∫–∞—Ä–º–∞—Å–∫–∞–ª–∏–Ω—Å–∫–∏–π –∏–Ω–∫—É–±–∞—Ç–æ—Ä. üê•

–ü—Ä–æ–¥–∞–µ–º –ø—Ç–∏—Ü—É, –∫–æ—Ä–º –∏ –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –ø—Ç–∏—Ü—ã.

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à —Ç–µ–∫—É—â–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, —Ü–µ–Ω—ã, –≥—Ä–∞—Ñ–∏–∫ –≤—ã–≤–æ–¥–æ–≤ –∏ –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.

–£ –Ω–∞—Å –µ—Å—Ç—å –µ—â–µ –æ–¥–∏–Ω –∏–Ω–∫—É–±–∞—Ç–æ—Ä –≤ –£—á–∞–ª–∞—Ö. –ï–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–æ–Ω—Ç–∞–∫—Ç—ã".

–ú—ã –ø—Ä–æ–¥–∞–µ–º –≤ —Ä–æ–∑–Ω–∏—Ü—É –∏ –≤ –æ–ø—Ç. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤. üìû
`
}

bot.launch();
